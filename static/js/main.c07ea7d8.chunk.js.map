{"version":3,"sources":["Form.js","Header.js","Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputChange","event","setState","pesoReal","Number","target","value","selectChange","pesoPlaneta","obtenerPesoPlaneta","planetaId","planeta","state","filter","id","nombrePlaneta","peso","calcularPeso","react_default","a","createElement","className","placeholder","onChange","name","selected","map","p","key","onClick","React","Component","Header","style","color","title","Resultado","elResultado","App","onPesoCalculado","pesoCalculado","onPlanetaSeleccionado","estaSeteado","length","src_Header","src_Form","src_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c07ea7d8.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pesoReal: 0,\n            pesoPlaneta: 0,\n            planeta: [\n                { id:1, value: 'Mercurio', peso: 0.0387 },\n                { id:2, value: 'Venus', peso: 0.9051 },\n                { id:3, value: 'Marte', peso: 0.3775 },\n                { id:4, value: 'Jupiter', peso: 2.5306 },\n                { id:5, value: 'Saturno', peso: 1.0653 },\n                { id:6, value: 'Urano', peso:  0.8877 },\n                { id:7, value: 'Neptuno', peso: 1.1377 },\n                { id:8, value: 'Pluton', peso: 0.0632 }  \n            ]\n        }\n        \n    }\n    \n    inputChange = (event) => {\n        this.setState({\n            pesoReal: Number(event.target.value)\n        })\n    }\n    \n    selectChange = (event) => {\n        this.setState({\n            pesoPlaneta: Number(this.obtenerPesoPlaneta(event.target.value))\n        })\n    }\n    \n    obtenerPesoPlaneta = (planetaId) => {\n        var planeta = this.state.planeta.filter( (planeta) => planeta.id === Number(planetaId))[0];\n        this.props.nombrePlaneta(planeta.value);\n        return planeta.peso;\n    }\n    \n    calcularPeso = () => {\n        var pesoReal = Number(this.state.pesoReal);\n        var pesoPlaneta = Number(this.state.pesoPlaneta);\n        \n        this.props.calcularPeso(Number(pesoReal * pesoPlaneta));\n    }\n    \n    render () {\n        return (\n            <div>\n            <form className=\"formulario\">\n            <input className=\"input\" placeholder=\"Calcula tu peso\" value={this.state.pesoReal} onChange={this.inputChange}></input>\n            <select className=\"select\" name=\"select\" onChange={this.selectChange}>\n            <option selected></option>\n            {this.state.planeta.map(p=>\n                <option value={p.id} key={p.id}>{p.value}</option>)}\n                </select>\n                </form>\n                <button onClick={this.calcularPeso} className=\"boton\">CALCULAR</button>\n                </div>\n                \n                );\n            };\n        };\n        \n        export default Form;","import React from 'react';\n\n\nconst Header = (props) => <h1 style={{color: props.color}}>{props.title}</h1>\n\nexport default Header;","import React from 'react';\n\n\nclass Resultado extends React.Component {\n    \n    render () {\n        \n        return (\n            <div className=\"resultado\">\n            <label>Tu peso en {this.props.nombrePlaneta} es </label>\n            <label>{this.props.elResultado}</label>\n            </div>\n            );\n        };\n    };\n    \n    export default Resultado;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Header from './Header';\nimport Resultado from './Resultado';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pesoCalculado: 0,\n      planeta: \"\"\n    }\n  }\n  \n  onPesoCalculado = (peso) => {\n    this.setState({\n      pesoCalculado: Number(peso)\n      \n    })\n  }\n  \n  onPlanetaSeleccionado = (planeta) => {\n    this.setState({\n      planeta: planeta\n     \n    })\n  }\n  \n  render() {\n\n    let estaSeteado = true;\n\n    if (this.state.pesoCalculado !== 0 && this.state.planeta.length > 1) {\n      estaSeteado = true;\n    } else {\n      estaSeteado = false;\n    }\n    \n    \n    return (\n      <div className=\"App\">\n      <Header title=\"Calcula tu peso de otro PLANETA!\" color=\"white\" />\n      <Form calcularPeso={this.onPesoCalculado} nombrePlaneta={this.onPlanetaSeleccionado}/>\n      {estaSeteado === true && <Resultado elResultado={this.state.pesoCalculado} nombrePlaneta={this.state.planeta}/>}\n      {estaSeteado === false && <label className=\"resultado\">Por favor complete los campos</label>}\n      </div>\n      );\n    }\n  }\n  \n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}